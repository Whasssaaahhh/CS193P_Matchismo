{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;\f2\fnil\fcharset0 Menlo-Bold;
}
{\colortbl;\red255\green255\blue255;\red28\green0\blue207;\red196\green26\blue22;\red170\green13\blue145;
\red100\green56\blue32;}
\paperw12240\paperh15840\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\b\fs24 \cf0 Project documenation
\b0 \
\
Stanford CS193P - Winter 2013 - Coding Together - Assignment 1\
\
-> instead of implementing a 2 or 3 card game, this project implements an 'n-card' game. \
\
All the code is kept generic, the number of segments in the segmented control determine the game possibilities :\
2 segments -> 2 or 3 matching card game\
3 segments -> 2 or 3 or 4 matching card game\
...\
Just add an extra segment to the control, and it will work !\
\
Because of the choice of implementing an n-card game, the scoring system is kept rather 'simpel'. Statistically the bonus assignments are of course arguable, but the focus is here on programming, MVC, less code is more, ...\
\

\b Scoring method 
\b0 :\
\
\pard\tx529\pardeftab529\pardirnatural

\f1\fs22 \cf0 \CocoaLigature0 rankStrings = \cf2 @[\cf3 @"?"\cf0 , \cf3 @"A"\cf0 , \cf3 @"2"\cf0 , \cf3 @"3"\cf0 , \cf3 @"4"\cf0 , \cf3 @"5"\cf0 , \cf3 @"6"\cf0 , \cf3 @"7"\cf0 , \cf3 @"8"\cf0 , \cf3 @"9"\cf0 , \cf3 @"10"\cf0 , \cf3 @"J"\cf0 , \cf3 @"Q"\cf0 , \cf3 @"K"\cf2 ]\cf0 ;\
validSuits  = \cf2 @[\cf3 @"\uc0\u9829 "\cf0 , \cf3 @"\uc0\u9830 "\cf0 , \cf3 @"\uc0\u9824 "\cf0 , \cf3 @"\uc0\u9827 "\cf2 ]\cf0 ;\
\
possibilities \cf4 in\cf0  \cf2 'same suit matches'\cf0  : \cf2 2\cf0  .. \cf2 13\cf0 \
possibilities \cf4 in\cf0  \cf2 'same rank matches'\cf0  : \cf2 2\cf0  .. \cf2 4\cf0 \
\
\pard\tx529\pardeftab529\pardirnatural
\cf5 #define FLIP_COST \cf2 1\cf5 \
#define MISMATCH_PENALTY -\cf2 2\cf5 \
#define SUIT_MATCH_BONUS \cf2 4\cf5 \
#define RANK_MATCH_BONUS \cf2 8\cf5 \
\pard\tx529\pardeftab529\pardirnatural
\cf0 \

\f2\b \CocoaLigature1 for each suit
\f1\b0 \CocoaLigature0   (\uc0\u9827  \u9824  \u9830  \u9829 )\
     suitScore 
\f2\b \CocoaLigature1 +=
\f1\b0 \CocoaLigature0  \cf5 SUIT_MATCH_BONUS\cf0  x nbrOfCardsInSuitMatch\
\

\f2\b \CocoaLigature1 for each rank
\f1\b0 \CocoaLigature0  (\cf3 @"A"\cf0 , \cf3 @"2"\cf0 , \cf3 @"3"\cf0 , \cf3 @"4"\cf0 , \cf3 @"5"\cf0 , \cf3 @"6"\cf0 , \cf3 @"7"\cf0 , \cf3 @"8"\cf0 , \cf3 @"9"\cf0 , \cf3 @"10"\cf0 , \cf3 @"J"\cf0 , \cf3 @"Q"\cf0 , \cf3 @"K"\cf0 \
     rankScore 
\f2\b \CocoaLigature1 +=
\f1\b0 \CocoaLigature0  \cf5 RANK_MATCH_BONUS\cf0  x nbrOfCardsInRankMatch\
\
totalScore = suitScore + rankScore\
\
if (totalScore == 0)\
	-> totalScore = MISMATCH_PENALTY\
\

\f2\b \CocoaLigature1 about FLIP_COST
\f1\b0 \CocoaLigature0 \
\
to avoid that players leave some cards facing up continuously, the FLIP_COST is added for each facingUp card (not only the last flipped up card !)\
\
\

\f2\b \CocoaLigature1 example : 2 card mode
\f1\b0 \CocoaLigature0 \
\
 \cf2 5\cf0 \uc0\u9830  \cf2 5\cf0 \uc0\u9829 \
\
-> rank matches : 2x '5' -> rankScore = 2*8 = 16\
\
totalScore = 16\
\

\f2\b \CocoaLigature1 example : 3 card mode
\f1\b0 \CocoaLigature0 \
\
 \cf2 5\cf0 \uc0\u9830  \cf2 5\cf0 \uc0\u9829  \cf2 6\cf0 \uc0\u9829 \
\
-> rank matches : 2x '5' -> rankScore = 2*8 = 16\
-> suit matches : 2x '\uc0\u9829 ' -> suitScore = 2*4 = 8\
\
totalScore = 16 + 8 = 24 \
\

\f2\b \CocoaLigature1 example : 5 card mode
\f1\b0 \CocoaLigature0 \
\
 \cf2 5\cf0 \uc0\u9830  \cf2 5\cf0 \uc0\u9829  \cf2 6\cf0 \uc0\u9829  \cf2 7\cf0 \uc0\u9829  \cf2 7\cf0 \uc0\u9830 \
\
 -> suit matches : \cf2 2\cf0 x \cf2 '\uc0\u9830 '\cf0  and \cf2 3\cf0 x \cf2 '\uc0\u9829 ' => 2*4 + 3*4 = 20\
\cf0  -> rank matches : \cf2 2\cf0 x \cf2 '5'\cf0  and \cf2 2\cf0 x \cf2 '7' => 2*8 + 2*8 = 32\
\
\cf0 totalScore = 20 + 32 = 52}